#Использовать asserts
#Использовать logos
#Использовать tempfiles

Перем юТест;
Перем Лог;
Перем МенеджерВременныхФайлов;

// Основная точка входа
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	юТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;
	
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийПроверкиДублейПроцедурВызываетИсключение");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийПроверкиДублейПроцедурОбработаетФайл");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийПроверкиДублейПроцедурНеОбработаетНесуществующийФайл");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийПроверкиДублейПроцедурНеОбработаетНеИсходник");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийОтключенияПолнотекстовогоПоискаИмеетМетодПолученияНастроек");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийРазбораОтчетовОбработокРасширенийИмеетМетодПолученияНастроек");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийОтключенияПолнотекстовогоПоискаВозвращаетНастройки");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийРазбораОтчетовОбработокРасширенийВозвращаетНастройки");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийИсправлениеНеКаноническогоНаписанияИсправляетФайл");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоСценарийИсправлениеНеКаноническогоНаписанияНеИндексируетНеизмененные");
	Возврат ВсеТесты;
	
КонецФункции

Процедура ПередЗапускомТеста() Экспорт
	
	ВремТестер = Новый Тестер;
	Лог = Логирование.ПолучитьЛог(ВремТестер.ИмяЛога());
	
	ВключитьПоказОтладки();
	
	МенеджерВременныхФайлов = Новый МенеджерВременныхФайлов;
	
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	
	МенеджерВременныхФайлов.Удалить();
	МенеджерВременныхФайлов = Неопределено;
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСценарийИсправлениеНеКаноническогоНаписанияИсправляетФайл() Экспорт
	
	ОбъектСценария	= ПолучитьСценарий("ИсправлениеНеКаноническогоНаписания.os");
	ИмяФайла = "ИсправлениеНеКаноническогоНаписания.bsl";

	Файл = ПодготовитьИзменяемыйТестовыйФайл(ИмяФайла);
	
	Результат		= ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, ПолучитьДополнительныеНастройки());
	Ожидаем.Что(Результат, Истина).ЭтоИстина();
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСценарийИсправлениеНеКаноническогоНаписанияНеИндексируетНеизмененные() Экспорт
	
	ОбъектСценария	= ПолучитьСценарий("ИсправлениеНеКаноническогоНаписания.os");
	ИмяФайла = "ИсправлениеНеКаноническогоНаписания.bsl";

	Файл = ПодготовитьИзменяемыйТестовыйФайл(ИмяФайла);
	
	Результат		= ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, ПолучитьДополнительныеНастройки());
	ДопНастройки = ПолучитьДополнительныеНастройки();

	Результат		= ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, ДопНастройки);
	Ожидаем.Что(ДопНастройки.ИзмененныеКаталоги.Количество(), Истина).Равно(0);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСценарийОтключенияПолнотекстовогоПоискаИмеетМетодПолученияНастроек() Экспорт
	
	ОбъектСценария	= ПолучитьСценарий("ОтключениеПолнотекстовогоПоиска.os");
	
	СценарийИмеетМетод(ОбъектСценария, НазваниеМетодаНастроек());
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСценарийРазбораОтчетовОбработокРасширенийИмеетМетодПолученияНастроек() Экспорт
	
	ОбъектСценария	= ПолучитьСценарий("РазборОтчетовОбработокРасширений.os");
	
	СценарийИмеетМетод(ОбъектСценария, НазваниеМетодаНастроек());
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСценарийОтключенияПолнотекстовогоПоискаВозвращаетНастройки() Экспорт
	
	ОбъектСценария	= ПолучитьСценарий("ОтключениеПолнотекстовогоПоиска.os");
	
	СценарийВозвращаетНастройки(ОбъектСценария, "ОтключениеПолнотекстовогоПоиска");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСценарийРазбораОтчетовОбработокРасширенийВозвращаетНастройки() Экспорт
	
	ОбъектСценария	= ПолучитьСценарий("РазборОтчетовОбработокРасширений.os");
	
	СценарийВозвращаетНастройки(ОбъектСценария, "РазборОтчетовОбработокРасширений");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСценарийПроверкиДублейПроцедурВызываетИсключение() Экспорт
	
	ОбъектСценария	= ПолучитьСценарий("ПроверкаДублейПроцедурИФункций.os");
	Файл			= Новый Файл(ОбъединитьПути(КаталогТестовыхФикстур(), "ПроверкаДублейПроцедурНегативныйТест.bsl"));
	СПараметрами	= Новый Файл(ОбъединитьПути(КаталогТестовыхФикстур(), "ПроверкаДублейПроцедурСПараметрами.bsl"));

	ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, "обнаружены неуникальные имена методов");
	ВызываетсяИсключениеСТекстом(ОбъектСценария, СПараметрами, "обнаружены неуникальные имена методов");

	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСценарийПроверкиДублейПроцедурОбработаетФайл() Экспорт
	
	Файл			= Новый Файл(ОбъединитьПути(КаталогТестовыхФикстур(), "ПроверкаДублейПроцедурПоложительныйТест.bsl"));
	ОбъектСценария	= ПолучитьСценарий("ПроверкаДублейПроцедурИФункций.os");
	Результат		= ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, ПолучитьДополнительныеНастройки());
	
	Ожидаем.Что(Результат, Истина).ЭтоИстина();
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСценарийПроверкиДублейПроцедурНеОбработаетНесуществующийФайл() Экспорт
	
	Файл			= Новый Файл(ПолучитьИмяВременногоФайла("bsl"));
	ОбъектСценария	= ПолучитьСценарий("ПроверкаДублейПроцедурИФункций.os");
	Результат		= ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, ПолучитьДополнительныеНастройки());
	
	Ожидаем.Что(Результат, Истина).ЭтоЛожь();
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСценарийПроверкиДублейПроцедурНеОбработаетНеИсходник() Экспорт
	
	Файл			= Новый Файл(МенеджерВременныхФайлов.СоздатьФайл("xml"));
	ОбъектСценария	= ПолучитьСценарий("ПроверкаДублейПроцедурИФункций.os");
	Результат		= ОбъектСценария.ОбработатьФайл(Файл, Файл.Путь, ПолучитьДополнительныеНастройки());
	
	Ожидаем.Что(Результат, Истина).ЭтоЛожь();
	
КонецПроцедуры

Процедура ВызываетсяИсключениеСТекстом(ОбъектСценария, Файл, ТекстИсключения)
	
	ДополнительныеНастройки	= ПолучитьДополнительныеНастройки();
	ПараметрыМетода			= Новый Массив;
	
	ПараметрыМетода.Добавить(Файл);
	ПараметрыМетода.Добавить(Файл.Путь);
	ПараметрыМетода.Добавить(ДополнительныеНастройки);
	
	Ожидаем.Что(ОбъектСценария).Метод("ОбработатьФайл", ПараметрыМетода).ВыбрасываетИсключение(ТекстИсключения);
	
КонецПроцедуры

Процедура СценарийИмеетМетод(ОбъектСценария, ИмяМетода)
	
	Рефлектор = Новый Рефлектор;
	ЕстьМетод = Рефлектор.МетодСуществует(ОбъектСценария, ИмяМетода);
	
	Ожидаем.Что(ЕстьМетод, Истина).ЭтоИстина();
	
КонецПроцедуры

Функция ПолучитьСценарий(ИмяСценария)
	
	Сценарий		= ОбъединитьПути(КаталогИсходников(), "src", "СценарииОбработки", ИмяСценария);
	ОбъектСценария	= ЗагрузитьСценарий(Сценарий);
	
	Возврат ОбъектСценария;
	
КонецФункции

Процедура СценарийВозвращаетНастройки(ОбъектСценария, ИмяНастройки)
	
	Рефлектор 			= Новый Рефлектор;
	СтруктураНастроек	= Рефлектор.ВызватьМетод(ОбъектСценария, НазваниеМетодаНастроек()); 
	
	Утверждения.ПроверитьРавенство(СтруктураНастроек.ИмяСценария, ИмяНастройки);
	Утверждения.ПроверитьРавенство(ТипЗнч(СтруктураНастроек.Настройка), Тип("Соответствие"));

КонецПроцедуры

Процедура ВключитьПоказОтладки()
	Лог.УстановитьУровень(УровниЛога.Отладка);
КонецПроцедуры

Процедура ВыключитьПоказОтладки()
	Лог.УстановитьУровень(УровниЛога.Информация);
КонецПроцедуры

Функция КаталогТестовыхФикстур() 
	Возврат ОбъединитьПути(КаталогИсходников(), "tests\fixtures");
КонецФункции

Функция КаталогИсходников() 
	Возврат ОбъединитьПути(ТекущийСценарий().Каталог, "..");
КонецФункции

Функция НазваниеМетодаНастроек()
	
	Возврат "ПолучитьСтандартныеНастройкиСценария";
	
КонецФункции

Функция ПолучитьДополнительныеНастройки()
	
	УправлениеНастройками	= Новый НастройкиРепозитория(ТекущийКаталог());
	ДополнительныеНастройки	= Новый Структура("Лог, УправлениеНастройками, ИзмененныеКаталоги", 
											Лог, УправлениеНастройками, Новый Массив);
	
	Возврат ДополнительныеНастройки;
	
КонецФункции

Функция ПодготовитьИзменяемыйТестовыйФайл(Знач ИмяТестовогоФайла)
	
	ПутьКТесту	= ОбъединитьПути(КаталогТестовыхФикстур(), ИмяТестовогоФайла);
	ПутьКФайлу = МенеджерВременныхФайлов.СоздатьФайл(ИмяТестовогоФайла);
	КопироватьФайл(ПутьКТесту, ПутьКФайлу);
	Файл = Новый Файл(ПутьКФайлу);
	
	Возврат Файл;

КонецФункции
