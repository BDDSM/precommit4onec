///////////////////////////////////////////////////////////////////////////////
//
// Служебный модуль с реализацией работы команды <configuration>
//
// (с) BIA Technologies, LLC
//
///////////////////////////////////////////////////////////////////////////////

#Использовать gitrunner
Перем Лог;

///////////////////////////////////////////////////////////////////////////////

Процедура НастроитьКоманду(Знач Команда, Знач Парсер) Экспорт
	
	// Добавление параметров команды
	Парсер.ДобавитьПараметрФлагКоманды(Команда, "-global", "Работа с глобальными настройками.");
	Парсер.ДобавитьИменованныйПараметрКоманды(Команда, "-rep-path", "Каталог репозитория, настройки которого интересуют.");
	Парсер.ДобавитьИменованныйПараметрКоманды(Команда, "-child-path", "Относительный путь к каталогу с исходниками внутри каталога rep-path, для которого нужна отдельная настройка");
	Парсер.ДобавитьПараметрФлагКоманды(Команда, "-reset", "Сброс настроек на значения по умолчанию. Если редактируются настройки репозитория, то происходит удаление файла настроек.");
	Парсер.ДобавитьПараметрФлагКоманды(Команда, "-config", "Интерактивное конфигурирование настроек.");
	Парсер.ДобавитьПараметрФлагКоманды(Команда, "-child", "Указывает на работу с настройками подпроектов в репозитории, вместе с командой -reset удалит только подпроекты");

КонецПроцедуры // НастроитьКоманду

// Выполняет логику команды
// 
// Параметры:
//   ПараметрыКоманды - Соответствие - Соответствие ключей командной строки и их значений
//   Приложение - Модуль - Модуль менеджера приложения
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды, Знач Приложение) Экспорт
	
	Лог = Приложение.ПолучитьЛог();
	ОшибкаВводаПараметров = ПроверитьВалидностьПараметров(ПараметрыКоманды);
	
	Если ЗначениеЗаполнено(ОшибкаВводаПараметров) Тогда
		
		Лог.Ошибка(ОшибкаВводаПараметров);
		Возврат Приложение.РезультатыКоманд().НеверныеПараметры;
		
	КонецЕсли;
	
	Если ПараметрыКоманды["-global"] Тогда
		
		КаталогРепозитория = Приложение.ПутьКРодительскомуКаталогу();
		УправлениеНастройками = МенеджерНастроек.ГлобальныеНастройки();

	Иначе
		
		КаталогРепозитория = ПараметрыКоманды["-rep-path"];
		УправлениеНастройками = МенеджерНастроек.ПолучитьНастройки(КаталогРепозитория, Ложь);
		
	КонецЕсли;
	
	Если ПараметрыКоманды["-reset"] Тогда
		
		Если ПараметрыКоманды["-global"] Тогда
			
			ЗаписатьГлобальныеНастройкиПоУмолчанию(УправлениеНастройками, Приложение.КаталогСценариев());
			
		Иначе
			
			СброситьНастройкиРепозитория(УправлениеНастройками, ПараметрыКоманды["-child"], ПараметрыКоманды["-child-path"], КаталогРепозитория);
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыКоманды["-config"] Тогда
		
		Если ЗначениеЗаполнено(ПараметрыКоманды["-child-path"]) Тогда
			
			УказанныйПуть = ПараметрыКоманды["-child-path"];
			
			Если ПроверитьАдресДополнительногоКаталога(КаталогРепозитория, УказанныйПуть, УправлениеНастройками) Тогда
				
				УказанныйПуть = ФайловыеОперации.ПолучитьНормализованныйОтносительныйПуть(КаталогРепозитория, УказанныйПуть);
				НовыеНастройки = ИнтерактивнаяНастройка(УказанныйПуть, УправлениеНастройками, Ложь, Приложение.КаталогСценариев(), Истина);
				УправлениеНастройками.ОбновитьКонфигурацию();
				УправлениеНастройками.ЗаписатьНастройкиПриложения(УказанныйПуть, НовыеНастройки.Получить(УказанныйПуть));
				
			КонецЕсли;
			
		Иначе
			
			НовыеНастройки = ИнтерактивнаяНастройка(КаталогРепозитория, УправлениеНастройками, ПараметрыКоманды["-global"], Приложение.КаталогСценариев());
			СконфигурироватьДополнительныеКаталоги(УправлениеНастройками, НовыеНастройки, Приложение.КаталогСценариев(), КаталогРепозитория);
			СброситьНастройкиРепозитория(УправлениеНастройками);
			ЗаписатьНастройкиРепозитория(УправлениеНастройками, НовыеНастройки);
			
		КонецЕсли;
		
	Иначе
		
		НапечататьНастройки(УправлениеНастройками);
		
	КонецЕсли;
	
	// При успешном выполнении возвращает код успеха
	Возврат Приложение.РезультатыКоманд().Успех;
	
КонецФункции // ВыполнитьКоманду

Функция ПроверитьВалидностьПараметров(ПараметрыКоманды)
	
	ОшибкаПараметров = "";
	
	Если НЕ ПараметрыКоманды["-global"]
		И НЕ ЗначениеЗаполнено(ПараметрыКоманды["-rep-path"]) Тогда
		
		ОшибкаПараметров ="Для конфигурирования необходимо передать флаг -global или указать каталог репозитория параметром -rep-path";
		
	ИначеЕсли ПараметрыКоманды["-global"] И ЗначениеЗаполнено(ПараметрыКоманды["-child-path"]) Тогда
		
		ОшибкаПараметров = "Нельзя конфигурировать дополнительные проекты глобально";
		
	КонецЕсли;
	
	Возврат ОшибкаПараметров;
	
КонецФункции

Процедура НапечататьНастройки(УправлениеНастройками)
	
	Если УправлениеНастройками.ЭтоНовый() Тогда
		
		Лог.Информация("Файл настроек не обнаружен");
		Возврат;
		
	КонецЕсли;
	
	ВсеНастройки = УправлениеНастройками.ПолучитьПроектыКонфигурации();
	
	Для Каждого Настройка из ВсеНастройки Цикл
		
		НастройкиПрекоммита = УправлениеНастройками.НастройкиПриложения("Precommit4onecСценарии");
		
		Если НЕ ЗначениеЗаполнено(НастройкиПрекоммита) Тогда
			
			Лог.Информация(СтрШаблон("Настройки %1 в файле отсутствуют", Настройка));
			Продолжить;
			
		КонецЕсли;
		
		Сообщить("Установленные настройки: " + Настройка);
		
		ВывестиНастройкиРекурсивно(НастройкиПрекоммита);

	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиНастройкиРекурсивно(НастройкиПрекоммита, Уровень = 1)
	
	ПробельныеСимволы = "";
	
	Для Счетчик = 1 по Уровень Цикл
		
		ПробельныеСимволы = ПробельныеСимволы + Символы.Таб;
		
	КонецЦикла;
	
	Для Каждого НастройкаПрекоммита Из НастройкиПрекоммита Цикл
		
		Если ТипЗнч(НастройкаПрекоммита.Значение) = Тип("Массив") Тогда
			
			ЗначениеПараметра = СтрСоединить(НастройкаПрекоммита.Значение, ",");
			
		Иначе
			
			ЗначениеПараметра = НастройкаПрекоммита.Значение;
			
		КонецЕсли;
		
		Сообщить(ПробельныеСимволы + НастройкаПрекоммита.Ключ + " = " + ЗначениеПараметра);
		
		Если ТипЗнч(НастройкаПрекоммита.Значение) = Тип("Соответствие") Тогда
			
			ВывестиНастройкиРекурсивно(НастройкаПрекоммита.Значение, Уровень + 1);
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьГлобальныеНастройкиПоУмолчанию(УправлениеНастройками, ТекущийКаталогСценариев)
	
	ИмяПриложения = УправлениеНастройками.ИмяПоУмолчанию();
	
	СброситьНастройкиРепозитория(УправлениеНастройками);
	
	Настройки = УправлениеНастройками.ПолучитьСтандартнуюСтруктуруНастроек();
	
	ГлобальныеСценарии = ПолучитьИменаСценариев(ТекущийКаталогСценариев);
	НастройкиСценариев = СформироватьНастройкиСценариев(ГлобальныеСценарии, ТекущийКаталогСценариев);
	
	Настройки.Вставить("ГлобальныеСценарии", ГлобальныеСценарии);
	Настройки.Вставить("НастройкиСценариев", НастройкиСценариев);
	
	УправлениеНастройками.ЗаписатьНастройкиПриложения(ИмяПриложения, Настройки);
	
КонецПроцедуры

Процедура СброситьНастройкиРепозитория(УправлениеНастройками, ТолькоДополнительные = Ложь, ПутьКаталога = "", КаталогРепозитория = "")
	
	Если УправлениеНастройками.ЭтоНовый() Тогда
		
		Возврат;
		
	КонецЕсли;
	Сообщить("ТокДопы" + ТолькоДополнительные);
	Если ЗначениеЗаполнено(ПутьКаталога) Тогда
		ПутьКаталога = ФайловыеОперации.ПолучитьНормализованныйОтносительныйПуть(КаталогРепозитория, ПутьКаталога);
		Если ПутьКаталога = УправлениеНастройками.ИмяБазовойНастройки() Тогда
			ВызватьИсключение "Нельзя удалять базовую настройку отдельно сбросьте все локальные настройки приложения";
		КонецЕсли;
		УправлениеНастройками.УдалитьНастройку("Precommit4onecСценарии" , ПутьКаталога);
		
	ИначеЕсли ТолькоДополнительные Тогда 
		
		ВсеНастройки = УправлениеНастройками.ПолучитьПроектыКонфигурации(ТолькоДополнительные);
		
		Для Каждого Настройка Из ВсеНастройки Цикл
			
			УправлениеНастройками.УдалитьНастройку("Precommit4onecСценарии" , Настройка);
			
		КонецЦикла;
	Иначе
		УправлениеНастройками.УдалитьНастройкиПриложения("Precommit4onecСценарии");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьНастройкиРепозитория(УправлениеНастройками, НовыеНастройки)
	
	Для каждого НоваяНастройка Из НовыеНастройки Цикл
		УправлениеНастройками.ЗаписатьНастройкиПриложения(НоваяНастройка.Ключ, НоваяНастройка.Значение);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьИменаСценариев(КаталогСценариев)
	
	НайденныеСценарии = Новый Массив;
	ФайлыСценариев = НайтиФайлы(КаталогСценариев, "*.os");
	Для Каждого ФайлСценария Из ФайлыСценариев Цикл
		
		Если СтрСравнить(ФайлСценария.ИмяБезРасширения, "ШаблонСценария") = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НайденныеСценарии.Добавить(ФайлСценария.Имя);
		
	КонецЦикла;
	
	Возврат НайденныеСценарии;
	
КонецФункции

Функция СформироватьНастройкиСценариев(МассивСценариев, КаталогСценариев)
	
	НастройкиСценариев	= Новый Соответствие;
	Рефлектор 			= Новый Рефлектор;
	
	Для Каждого Сценарий Из МассивСценариев Цикл
		
		ОбъектСценария = ЗагрузитьСценарий(ОбъединитьПути(КаталогСценариев, Сценарий));
		
		Если Рефлектор.МетодСуществует(ОбъектСценария, "ПолучитьСтандартныеНастройкиСценария") Тогда
			
			СтруктураНастроек = Рефлектор.ВызватьМетод(ОбъектСценария, "ПолучитьСтандартныеНастройкиСценария"); 
			НастройкиСценариев.Вставить(СтруктураНастроек.ИмяСценария, СтруктураНастроек.Настройка);
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат НастройкиСценариев;
	
КонецФункции

Функция ИнтерактивнаяНастройка(КаталогРепозитория, УправлениеНастройками, ГлобальныеНастройки, КаталогГлобальныхСценариев, ЭтоДопПроект = Ложь)

	ИмяПриложения = УправлениеНастройками.ИмяПоУмолчанию();
	ПолныеНастройки = Новый Соответствие;
	Сообщить(СтрШаблон("Настройка конфигурации precommit %1%2", Символы.ПС, КаталогРепозитория));
	
	ГлобальныеСценарии 	= МенеджерНастроек.ЗначениеНастройки("ГлобальныеСценарии");
	ОтключенныеСценарии = МенеджерНастроек.ЗначениеНастройки("ОтключенныеСценарии");
	ИменаСценариев 		= ПолучитьИменаСценариев(КаталогГлобальныхСценариев);
	
	Лог.Отладка("Сохраненные значения опции 'ГлобальныеСценарии': %1%2", 
		Символы.ПС, ?(НЕ ЗначениеЗаполнено(ГлобальныеСценарии), "<пусто>", СтрСоединить(ГлобальныеСценарии, Символы.ПС)));
	Лог.Отладка("Сохраненные значения опции 'ОтключенныеСценарии': %1%2", 
		Символы.ПС, ?(НЕ ЗначениеЗаполнено(ОтключенныеСценарии), "<пусто>", СтрСоединить(ОтключенныеСценарии, Символы.ПС)));

	Если ПолучитьНастройкуБулево("Выполнить настройку подключенных глобальных сценариев?", Истина) Тогда
	
		ГлобальныеСценарии = ПолучитьНастройкуМассив("Выберите подключаемые глобальные сценарии: ", 
			ИменаСценариев, ГлобальныеСценарии);
		
	ИначеЕсли ПолучитьНастройкуБулево("Выполнить настройку отключенных глобальных сценариев?", Истина) Тогда
		
		ОтключенныеСценарии = ПолучитьНастройкуМассив("Выберите отключаемые глобальные сценарии: ", 
			ИменаСценариев, ?(ОтключенныеСценарии = Неопределено, Новый Массив, ОтключенныеСценарии));
		
	КонецЕсли;
	
	Если ГлобальныеНастройки Тогда
		
		Подсказка = "Нужно использовать сценарии локальных репозиториев?";
		
	Иначе
		
		Подсказка = "Нужно использовать локальные сценарии?";
		
	КонецЕсли;
	
	ИспользоватьСценарииРепозитория = ПолучитьНастройкуБулево(Подсказка, МенеджерНастроек.ЗначениеНастройки("ИспользоватьСценарииРепозитория"));
	
	КаталогЛокальныхСценариев = "";

	Если ИспользоватьСценарииРепозитория Тогда
		
		КаталогЛокальныхСценариев = ПолучитьНастройкуСтрока("Укажите относительный путь к сценариям в репозитории: ", 
		УправлениеНастройками.Настройка(ИмяПриложения + "\КаталогЛокальныхСценариев"));
		
	КонецЕсли;
	
	НастройкиПриложения	= УправлениеНастройками.ПолучитьСтандартнуюСтруктуруНастроек();
	
	Если ГлобальныеСценарии <> Неопределено Тогда
		
		ИсполняемыеСценарии = МенеджерНастроек.ПолучитьСписокИсполняемыхСценариев(ГлобальныеСценарии, ОтключенныеСценарии);
		
	Иначе

		ИсполняемыеСценарии = МенеджерНастроек.ПолучитьСписокИсполняемыхСценариев(ИменаСценариев, ОтключенныеСценарии);

	КонецЕсли;
	
	Лог.Отладка("Итоговый список исполняемых сценариев: %1%2", Символы.ПС, СтрСоединить(ИсполняемыеСценарии, Символы.ПС));

	НастройкиСценариев	= СформироватьНастройкиСценариев(ИсполняемыеСценарии, КаталогГлобальныхСценариев);
	
	НастройкиПриложения.Вставить("ИспользоватьСценарииРепозитория", ИспользоватьСценарииРепозитория);
	НастройкиПриложения.Вставить("КаталогЛокальныхСценариев", КаталогЛокальныхСценариев);

	Если ГлобальныеСценарии <> Неопределено Тогда
		НастройкиПриложения["ГлобальныеСценарии"] = ГлобальныеСценарии;
		Лог.Отладка("Новое значение опции 'ГлобальныеСценарии': %1", СтрСоединить(ГлобальныеСценарии, ", "));
	ИначеЕсли НЕ ГлобальныеНастройки Тогда
		// Для локальных удалим ключ, чтоб использовались глобальные
		НастройкиПриложения.Удалить("ГлобальныеСценарии");
	Иначе
		// Останется значение по умолчанию - пустой массив
	КонецЕсли;

	Если ОтключенныеСценарии <> Неопределено Тогда
		НастройкиПриложения["ОтключенныеСценарии"] = ОтключенныеСценарии;
		Лог.Отладка("Новое значение опции 'ОтключенныеСценарии': %1", СтрСоединить(ОтключенныеСценарии, ", "));
	КонецЕсли;

	НастройкиПриложения.Вставить("НастройкиСценариев", НастройкиСценариев);
	
	ИмяПриложения = ?(ЭтоДопПроект, КаталогРепозитория, УправлениеНастройками.ИмяПоУмолчанию());
	ПолныеНастройки.Вставить(ИмяПриложения, НастройкиПриложения);
	
	Возврат ПолныеНастройки;
	
КонецФункции

Процедура СконфигурироватьДополнительныеКаталоги(УправлениеНастройками, ОсновныеНастройки, КаталогГлобальныхСценариев, КаталогРепозитория)
	
	Пока ПолучитьНастройкуБулево("Сконфигурировать дополнительный каталог со своими правилами обработки?", Ложь) Цикл
		
		АдресКаталога = ПолучитьНастройкуСтрока("Введите относительный путь в репозитории к каталогу", "");
		
		Если ПроверитьАдресДополнительногоКаталога(КаталогРепозитория, АдресКаталога, УправлениеНастройками) Тогда 
			
			АдресКаталога = ФайловыеОперации.ПолучитьНормализованныйОтносительныйПуть(КаталогРепозитория, АдресКаталога);
			НастройкиДополнительные = ИнтерактивнаяНастройка(АдресКаталога, УправлениеНастройками, Ложь, КаталогГлобальныхСценариев, Истина);
			ОсновныеНастройки.Вставить(АдресКаталога, НастройкиДополнительные.Получить(АдресКаталога));
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьАдресДополнительногоКаталога(КаталогРепозитория, АдресКаталога, УправлениеНастройками)
	
	РазрешеноДобавление = Истина;
	КаталогВРепо		= ФайловыеОперации.ПолучитьНормализованныйПолныйПуть(КаталогРепозитория, АдресКаталога);
	НастроенныеПроекты	= УправлениеНастройками.ПолучитьПроектыКонфигурации(Истина);
	Файл				= Новый Файл(КаталогВРепо);
	Сообщение			= "";
	
	Если Файл.Существует() И Файл.ЭтоКаталог() Тогда
		
		Для Каждого Проект Из НастроенныеПроекты Цикл
			
			КаталогНастроенныйВКонфигурации = ФайловыеОперации.ПолучитьНормализованныйПолныйПуть(КаталогРепозитория, Проект);
			
			Если КаталогВРепо = КаталогНастроенныйВКонфигурации Тогда
				
				Сообщение = "Каталог уже добавлен";
				РазрешеноДобавление = Ложь;
				Прервать;
				
			ИначеЕсли СтрНачинаетсяС(КаталогВРепо, КаталогНастроенныйВКонфигурации) ИЛИ СтрНачинаетсяС(КаталогНастроенныйВКонфигурации, КаталогВРепо) Тогда
				
				РазрешеноДобавление = Ложь;
				Сообщение = "Невозможно добавить вложенный каталог";
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;

	Иначе
		
		РазрешеноДобавление = Ложь;
		Сообщение = "Каталога не существует или это файл";
		
	КонецЕсли;
	
	Если НЕ РазрешеноДобавление Тогда 
		Сообщить(Сообщение);
	КонецЕсли;
	
	Возврат РазрешеноДобавление;
	
КонецФункции

Функция ПолучитьНастройкуБулево(ТекстПодсказки, Знач ЗначениеПоУмолчанию)
	
	Если НЕ ЗначениеЗаполнено(ЗначениеПоУмолчанию) Тогда
		
		ЗначениеПоУмолчанию = Истина;
		
	КонецЕсли;
	
	ВыбранноеЗначение = Формат(ЗначениеПоУмолчанию, "БЛ=n; БИ=y");
	Пока Истина Цикл
		
		Сообщить(ТекстПодсказки + " [" + Формат(ЗначениеПоУмолчанию, "БЛ=n; БИ=y") + "]. Введите y[es]/n[o]");
		ВвестиСтроку(ВыбранноеЗначение);
		
		Если СтрНайти("yY", ВыбранноеЗначение) Тогда
			
			ВыбранноеЗначение = Истина;
			Прервать;
			
		ИначеЕсли СтрНайти("nN", ВыбранноеЗначение) Тогда
			
			ВыбранноеЗначение = Ложь;
			Прервать;
			
		ИначеЕсли ВыбранноеЗначение = Символы.ПС Тогда
			
			ВыбранноеЗначение = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВыбранноеЗначение;
	
КонецФункции

Функция ПолучитьНастройкуМассив(ТекстПодсказки, ДоступныйМассив, Знач УстановленныеЗначения = Неопределено)
	
	Если УстановленныеЗначения = Неопределено Тогда
		
		УстановленныеЗначения = ДоступныйМассив;
		
	КонецЕсли;
	
	Сообщить(ТекстПодсказки);
	ВыбранныеЭлементы = Новый Массив;
	Для Ит = 0 По ДоступныйМассив.Количество() - 1 Цикл
		
		ЗначениеМассива = ДоступныйМассив[Ит];
		ТекстПодсказкиМассив = Символы.Таб + ЗначениеМассива;
		Если ПолучитьНастройкуБулево(ТекстПодсказкиМассив, УстановленныеЗначения.Найти(ЗначениеМассива) <> Неопределено) Тогда
			
			ВыбранныеЭлементы.Добавить(ЗначениеМассива);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВыбранныеЭлементы;
	
КонецФункции

Функция ПолучитьНастройкуСтрока(ТекстПодсказки, ЗначениеПоУмолчанию = "")
	
	ВыбранноеЗначение = "";
	Пока Истина Цикл
		
		Сообщить(ТекстПодсказки + ?(ПустаяСтрока(ЗначениеПоУмолчанию), "", "[" + ЗначениеПоУмолчанию + "]"));
		ВвестиСтроку(ВыбранноеЗначение);
		
		ВыбранноеЗначение = СокрЛП(ВыбранноеЗначение);
		Если Не ПустаяСтрока(ВыбранноеЗначение) Тогда
			
			Прервать;
			
		ИначеЕсли НЕ ПустаяСтрока(ЗначениеПоУмолчанию) Тогда
			
			ВыбранноеЗначение = ЗначениеПоУмолчанию;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВыбранноеЗначение;
	
КонецФункции
