///////////////////////////////////////////////////////////////////////////////
//
// Служебный модуль с набором методов для работы с файлами
//
// (с) BIA Technologies, LLC
//
///////////////////////////////////////////////////////////////////////////////

// ПрочитатьТекстФайла
//	Возвращает содержимое файла, читая его в правильной кодировке
// Параметры:
//   ПутьКФайлу - Строка - Полный путь к файлу
//
//  Возвращаемое значение:
//   Строка - Содержимое файла
//
Функция ПрочитатьТекстФайла(ПутьКФайлу) Экспорт
	
	Кодировка	= ОпределитьКодировку(ПутьКФайлу);
	Текст		= Новый ЧтениеТекста();
	Текст.Открыть(ПутьКФайлу, Кодировка);
	
	СодержимоеФайла = Текст.Прочитать();
	
	Текст.Закрыть();
	
	Возврат СодержимоеФайла;
	
КонецФункции // ПрочитатьТекстФайла

// ЗаписатьТекстФайла
//	Определяет кодировку файла и записывает содержимое в файл
// 
// Параметры:
//	ПутьКФайлу 		- Строка - Полный путь к файлу
//	СодержимоеФайла	- Строка - Текст для записи
Процедура ЗаписатьТекстФайла(ПутьКФайлу, СодержимоеФайла) Экспорт
	
	Кодировка		= ОпределитьКодировку(ПутьКФайлу);
	ЗаписьТекста	= Новый ЗаписьТекста(ПутьКФайлу, Кодировка, , , Символы.ПС);
	
	ЗаписьТекста.Записать(СодержимоеФайла);
	ЗаписьТекста.Закрыть();
	
КонецПроцедуры // ЗаписатьТекстФайла

// ОпределитьКодировку
//	Читает первые 3 байта файла и ищет маркер BOM кодировки UTF-8
// Параметры:
//   ПутьКФайлу - Строка - Полный путь к файлу
//
//  Возвращаемое значение:
//   Перечисление - Кодировка файла
//
Функция ОпределитьКодировку(ПутьКФайлу) Экспорт
	
	МаркерUTFBOM	= СтрРазделить("239 187 191", " ");
	ЧтениеДанных	= Новый ЧтениеДанных(ПутьКФайлу);
	Буфер			= Новый БуферДвоичныхДанных(МаркерUTFBOM.Количество());
	
	ЧтениеДанных.ПрочитатьВБуферДвоичныхДанных(Буфер, , МаркерUTFBOM.Количество());
	Cч		= 0;
	ЕстьBOM	= Истина;
	
	Для Каждого Байт ИЗ Буфер Цикл
		
		Если МаркерUTFBOM[Cч] <> Строка(Байт) Тогда
			
			ЕстьBOM = Ложь;
			Прервать;
			
		КонецЕсли;
		
		Cч = Cч + 1;
		
	КонецЦикла;
	
	ЧтениеДанных.Закрыть();
	
	Возврат ?(ЕстьBOM, КодировкаТекста.UTF8, КодировкаТекста.UTF8NoBOM);
	
КонецФункции // ОпределитьКодировку

// Возвращает путь файла относительно корневого каталога
//
// Параметры:
//   ПутьКорневогоКаталога - Строка - путь корневого каталога
//   ПутьВнутреннегоФайла - Строка - путь файла
//   РазделительПути - Строка или Неопределено - все разделители в пути заменяются на указанный разделитель пути
//		если Неопределено, то разделители пути не заменяются
//
//  Возвращаемое значение:
//   Строка - относительный путь файла
//
Функция ОтносительныйПуть(Знач ПутьКорневогоКаталога, Знач ПутьВнутреннегоФайла, Знач РазделительПути = Неопределено) Экспорт

	ПроверитьКорневойКаталог(ПутьКорневогоКаталога);
	
	ФайлКорень = Новый Файл(ПутьКорневогоКаталога);
	ФайлВнутреннийКаталог = Новый Файл(ПутьВнутреннегоФайла);
	Рез = СтрЗаменить(ФайлВнутреннийКаталог.ПолноеИмя, ФайлКорень.ПолноеИмя, "");
	
	Если Найти("\/", Лев(Рез, 1)) > 0 Тогда
		Рез = Сред(Рез, 2);	
	КонецЕсли;

	Если Найти("\/", Прав(Рез, 1)) > 0 Тогда
		Рез = Лев(Рез, СтрДлина(Рез)-1);
	КонецЕсли;
	
	Если РазделительПути <> Неопределено Тогда
		Рез = СтрЗаменить(Рез, "\", РазделительПути);
		Рез = СтрЗаменить(Рез, "/", РазделительПути);
	КонецЕсли;

	Если ПустаяСтрока(Рез) Тогда
		Рез = ".";
	КонецЕсли;

	Возврат Рез;
КонецФункции

// Возвращает относительный путь файла по относительному пути, обрезая разделители. Приводит разделители пути к формату ОС
//
// Параметры:
//   ПутьКорневогоКаталога - Строка - путь корневого каталога
//   ОтносительныйПутьФайла - Строка - относительный путь в корне каталога
//
//  Возвращаемое значение:
//   Строка - относительный путь файла
//
Функция ПолучитьНормализованныйОтносительныйПуть(Знач ПутьКорневогоКаталога, Знач ОтносительныйПутьФайла) Экспорт

	ПроверитьКорневойКаталог(ПутьКорневогоКаталога);
	
	ПолныйПутьФайла = ОбъединитьПути(ПутьКорневогоКаталога, ОтносительныйПутьФайла);
	ОтносительныйПуть = ОтносительныйПуть(ПутьКорневогоКаталога, ПолныйПутьФайла, ПолучитьРазделительПути());
	Файл = Новый Файл(ПолныйПутьФайла);
	ЭтоКаталог = Файл.Существует() И Файл.ЭтоКаталог();
	Результат = ?(ЭтоКаталог, ОтносительныйПуть + ПолучитьРазделительПути(), ОтносительныйПуть);
	
	Возврат Результат;

КонецФункции

// Возвращает полный путь файла по относительному пути, обрезая лишние разделители, приводит разделители пути к формату ОС
//
// Параметры:
//   ПутьКорневогоКаталога - Строка - путь корневого каталога
//   ОтносительныйПутьФайла - Строка - относительный путь в корне каталога
//
//  Возвращаемое значение:
//   Строка - полный путь файла
//
Функция ПолучитьНормализованныйПолныйПуть(Знач ПутьКорневогоКаталога, Знач ОтносительныйПутьФайла) Экспорт
	
	ПроверитьКорневойКаталог(ПутьКорневогоКаталога);

	ОтносительныйПуть = ПолучитьНормализованныйОтносительныйПуть(ПутьКорневогоКаталога, ОтносительныйПутьФайла);
	Результат = ОбъединитьПути(ПутьКорневогоКаталога, ОтносительныйПуть);
	
	Возврат Результат;

КонецФункции

Процедура ПроверитьКорневойКаталог(ПутьКорневогоКаталога)
	
	Если ПустаяСтрока(ПутьКорневогоКаталога) Тогда
		
		ВызватьИсключение "Не указан корневой путь в методе ОтносительныйПуть";
		
	КонецЕсли;

КонецПроцедуры